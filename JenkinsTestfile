pipeline {
    agent any
    environment {
        RUBY_HOME = "/usr/local/opt/ruby"
        PATH = "$RUBY_HOME/bin:$PATH"
        LANG = "en_US.UTF-8"
    }
    parameters {
        string(name: 'APP_BUILD_FOLDER', defaultValue: './build', description: 'Application build output folder')
        string(name: 'APP_PACKAGES_FOLDER', defaultValue: './build/packages', description: 'Application packages output folder')
        string(name: 'APP_TEST_FOLDER', defaultValue: './build/tests', description: 'Application test output folder')
        gitParameter(branch: '',
                     branchFilter: 'origin/(.*)',
                     defaultValue: 'main',
                     description: '',
                     name: 'BRANCH',
                     quickFilterEnabled: false,
                     selectedValue: 'NONE',
                     sortMode: 'NONE',
                     tagFilter: '*',
                     type: 'PT_BRANCH')
    }
    stages {
         stage('Checkout') {
            steps {
                echo "Checkout ${params.BRANCH}"
                checkout([$class: 'GitSCM',
                          branches: [[name: "${params.BRANCH}"]],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [],
                          gitTool: 'Default',
                          submoduleCfg: [],
                          userRemoteConfigs: [[url: 'git@github.com:LieonShelly/SampleApp.git']]
                        ])
            }
        }
        
        stage('Setup') {
            steps {
               echo "Setup"
            }
        }
        stage('Parallel Stage') {
            failFast true
            parallel {
                stage('Unit Test') {
                    steps {
                        script {
                           echo "Unit Test"
                        }
                    }
                }
                stage('Swiftlint') {
                    steps {
                        script {
                            echo "Swiftlint"
                        }
                    }
                }
            }
        }
    }
}
